// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Collector.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Collector_h__
#define __Collector_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Canon
{

class Collector;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Canon::Collector>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Canon::Collector*);

class Processor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Canon::Processor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Canon::Processor*);

class Frontend;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Canon::Frontend>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Canon::Frontend*);

}

}

namespace Canon
{

class Collector;
bool operator==(const Collector&, const Collector&);
bool operator<(const Collector&, const Collector&);
::Ice::Object* upCast(::Canon::Collector*);
typedef ::IceInternal::Handle< ::Canon::Collector> CollectorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Canon::Collector> CollectorPrx;
void __patch(CollectorPtr&, const ::Ice::ObjectPtr&);

class Processor;
bool operator==(const Processor&, const Processor&);
bool operator<(const Processor&, const Processor&);
::Ice::Object* upCast(::Canon::Processor*);
typedef ::IceInternal::Handle< ::Canon::Processor> ProcessorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Canon::Processor> ProcessorPrx;
void __patch(ProcessorPtr&, const ::Ice::ObjectPtr&);

class Frontend;
bool operator==(const Frontend&, const Frontend&);
bool operator<(const Frontend&, const Frontend&);
::Ice::Object* upCast(::Canon::Frontend*);
typedef ::IceInternal::Handle< ::Canon::Frontend> FrontendPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Canon::Frontend> FrontendPrx;
void __patch(FrontendPtr&, const ::Ice::ObjectPtr&);

}

namespace Canon
{

typedef ::std::vector< ::Ice::Double> DoubleArray;

typedef ::std::vector< ::Canon::DoubleArray> DoubleMatrix;

struct Matrix
{
    ::Ice::Int ncols;
    ::Canon::DoubleMatrix data;
    ::std::string UUID;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::Canon::Matrix>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::Canon::Matrix, S>
{
    static void write(S* __os, const ::Canon::Matrix& v)
    {
        __os->write(v.ncols);
        __os->write(v.data);
        __os->write(v.UUID);
    }
};

template<class S>
struct StreamReader< ::Canon::Matrix, S>
{
    static void read(S* __is, ::Canon::Matrix& v)
    {
        __is->read(v.ncols);
        __is->read(v.data);
        __is->read(v.UUID);
    }
};

}

namespace Canon
{

class Callback_Collector_inject_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Collector_inject_Base> Callback_Collector_injectPtr;

class Callback_Processor_init_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Processor_init_Base> Callback_Processor_initPtr;

class Callback_Processor_injectA_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Processor_injectA_Base> Callback_Processor_injectAPtr;

class Callback_Processor_injectB_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Processor_injectB_Base> Callback_Processor_injectBPtr;

class Callback_Frontend_multiply_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Frontend_multiply_Base> Callback_Frontend_multiplyPtr;

}

namespace IceProxy
{

namespace Canon
{

class Collector : virtual public ::IceProxy::Ice::Object
{
public:

    void inject(::Ice::Int index, const ::Canon::Matrix& result)
    {
        inject(index, result, 0);
    }
    void inject(::Ice::Int index, const ::Canon::Matrix& result, const ::Ice::Context& __ctx)
    {
        inject(index, result, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_inject(index, result, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_inject(index, result, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_inject(index, result, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_inject(index, result, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_inject(::Ice::Int index, const ::Canon::Matrix& result)
    {
        return begin_inject(index, result, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::Ice::Context& __ctx)
    {
        return begin_inject(index, result, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inject(index, result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inject(index, result, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::Canon::Callback_Collector_injectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inject(index, result, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_inject(::Ice::Int index, const ::Canon::Matrix& result, const ::Ice::Context& __ctx, const ::Canon::Callback_Collector_injectPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_inject(index, result, &__ctx, __del, __cookie);
    }

    void end_inject(const ::Ice::AsyncResultPtr&);
    
private:

    void inject(::Ice::Int, const ::Canon::Matrix&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_inject(::Ice::Int, const ::Canon::Matrix&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Collector> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_secure(bool __secure) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_twoway() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_oneway() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_batchOneway() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_datagram() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_batchDatagram() const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_compress(bool __compress) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Collector> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Collector*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Processor : virtual public ::IceProxy::Ice::Object
{
public:

    void init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target)
    {
        init(index, order, above, left, target, 0);
    }
    void init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::Ice::Context& __ctx)
    {
        init(index, order, above, left, target, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_init(index, order, above, left, target, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_init(index, order, above, left, target, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_init(index, order, above, left, target, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_init(index, order, above, left, target, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target)
    {
        return begin_init(index, order, above, left, target, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::Ice::Context& __ctx)
    {
        return begin_init(index, order, above, left, target, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(index, order, above, left, target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(index, order, above, left, target, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::Canon::Callback_Processor_initPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(index, order, above, left, target, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_init(::Ice::Int index, ::Ice::Int order, const ::Canon::ProcessorPrx& above, const ::Canon::ProcessorPrx& left, const ::Canon::CollectorPrx& target, const ::Ice::Context& __ctx, const ::Canon::Callback_Processor_initPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_init(index, order, above, left, target, &__ctx, __del, __cookie);
    }

    void end_init(const ::Ice::AsyncResultPtr&);
    
private:

    void init(::Ice::Int, ::Ice::Int, const ::Canon::ProcessorPrx&, const ::Canon::ProcessorPrx&, const ::Canon::CollectorPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_init(::Ice::Int, ::Ice::Int, const ::Canon::ProcessorPrx&, const ::Canon::ProcessorPrx&, const ::Canon::CollectorPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void injectA(const ::Canon::Matrix& a, ::Ice::Int step)
    {
        injectA(a, step, 0);
    }
    void injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::Ice::Context& __ctx)
    {
        injectA(a, step, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_injectA(a, step, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_injectA(a, step, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_injectA(a, step, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_injectA(a, step, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step)
    {
        return begin_injectA(a, step, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::Ice::Context& __ctx)
    {
        return begin_injectA(a, step, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectA(a, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectA(a, step, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::Canon::Callback_Processor_injectAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectA(a, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectA(const ::Canon::Matrix& a, ::Ice::Int step, const ::Ice::Context& __ctx, const ::Canon::Callback_Processor_injectAPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectA(a, step, &__ctx, __del, __cookie);
    }

    void end_injectA(const ::Ice::AsyncResultPtr&);
    
private:

    void injectA(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_injectA(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void injectB(const ::Canon::Matrix& b, ::Ice::Int step)
    {
        injectB(b, step, 0);
    }
    void injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx)
    {
        injectB(b, step, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_injectB(b, step, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_injectB(b, step, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_injectB(b, step, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_injectB(b, step, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step)
    {
        return begin_injectB(b, step, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx)
    {
        return begin_injectB(b, step, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectB(b, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectB(b, step, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::Canon::Callback_Processor_injectBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectB(b, step, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_injectB(const ::Canon::Matrix& b, ::Ice::Int step, const ::Ice::Context& __ctx, const ::Canon::Callback_Processor_injectBPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_injectB(b, step, &__ctx, __del, __cookie);
    }

    void end_injectB(const ::Ice::AsyncResultPtr&);
    
private:

    void injectB(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_injectB(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Processor> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_secure(bool __secure) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_twoway() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_oneway() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_batchOneway() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_datagram() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_batchDatagram() const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_compress(bool __compress) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Processor> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Processor*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Frontend : virtual public ::IceProxy::Ice::Object
{
public:

    ::Canon::Matrix multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b)
    {
        return multiply(a, b, 0);
    }
    ::Canon::Matrix multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Ice::Context& __ctx)
    {
        return multiply(a, b, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::IceInternal::Function<void (const ::Canon::Matrix&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_multiply(a, b, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_multiply(a, b, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Canon::Matrix&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_multiply(a, b, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_multiply(a, b, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Canon::Matrix&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Canon::Matrix&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::Canon::FrontendPrx __proxy = ::Canon::FrontendPrx::uncheckedCast(__result->getProxy());
                ::Canon::Matrix __ret;
                try
                {
                    __ret = __proxy->end_multiply(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Canon::Matrix&)> _response;
        };
        return begin_multiply(a, b, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b)
    {
        return begin_multiply(a, b, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Ice::Context& __ctx)
    {
        return begin_multiply(a, b, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_multiply(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_multiply(a, b, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Canon::Callback_Frontend_multiplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_multiply(a, b, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_multiply(const ::Canon::Matrix& a, const ::Canon::Matrix& b, const ::Ice::Context& __ctx, const ::Canon::Callback_Frontend_multiplyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_multiply(a, b, &__ctx, __del, __cookie);
    }

    ::Canon::Matrix end_multiply(const ::Ice::AsyncResultPtr&);
    
private:

    ::Canon::Matrix multiply(const ::Canon::Matrix&, const ::Canon::Matrix&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_multiply(const ::Canon::Matrix&, const ::Canon::Matrix&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Frontend> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_secure(bool __secure) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_twoway() const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_oneway() const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_batchOneway() const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_datagram() const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_batchDatagram() const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_compress(bool __compress) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Frontend> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Frontend*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Canon
{

class Collector : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void inject(::Ice::Int, const ::Canon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Processor : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void init(::Ice::Int, ::Ice::Int, const ::Canon::ProcessorPrx&, const ::Canon::ProcessorPrx&, const ::Canon::CollectorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void injectA(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void injectB(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Frontend : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Canon::Matrix multiply(const ::Canon::Matrix&, const ::Canon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace Canon
{

class Collector : virtual public ::IceDelegate::Canon::Collector,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void inject(::Ice::Int, const ::Canon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Processor : virtual public ::IceDelegate::Canon::Processor,
                  virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void init(::Ice::Int, ::Ice::Int, const ::Canon::ProcessorPrx&, const ::Canon::ProcessorPrx&, const ::Canon::CollectorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void injectA(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void injectB(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Frontend : virtual public ::IceDelegate::Canon::Frontend,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Canon::Matrix multiply(const ::Canon::Matrix&, const ::Canon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace Canon
{

class Collector : virtual public ::IceDelegate::Canon::Collector,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void inject(::Ice::Int, const ::Canon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Processor : virtual public ::IceDelegate::Canon::Processor,
                  virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void init(::Ice::Int, ::Ice::Int, const ::Canon::ProcessorPrx&, const ::Canon::ProcessorPrx&, const ::Canon::CollectorPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void injectA(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void injectB(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Frontend : virtual public ::IceDelegate::Canon::Frontend,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Canon::Matrix multiply(const ::Canon::Matrix&, const ::Canon::Matrix&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace Canon
{

class Collector : virtual public ::Ice::Object
{
public:

    typedef CollectorPrx ProxyType;
    typedef CollectorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void inject(::Ice::Int, const ::Canon::Matrix&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___inject(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Collector& l, const Collector& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Collector& l, const Collector& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Processor : virtual public ::Ice::Object
{
public:

    typedef ProcessorPrx ProxyType;
    typedef ProcessorPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void init(::Ice::Int, ::Ice::Int, const ::Canon::ProcessorPrx&, const ::Canon::ProcessorPrx&, const ::Canon::CollectorPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___init(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void injectA(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___injectA(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void injectB(const ::Canon::Matrix&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___injectB(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Processor& l, const Processor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Processor& l, const Processor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Frontend : virtual public ::Ice::Object
{
public:

    typedef FrontendPrx ProxyType;
    typedef FrontendPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Canon::Matrix multiply(const ::Canon::Matrix&, const ::Canon::Matrix&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___multiply(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Frontend& l, const Frontend& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Frontend& l, const Frontend& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Canon
{

template<class T>
class CallbackNC_Collector_inject : public Callback_Collector_inject_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Collector_inject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Collector_injectPtr
newCallback_Collector_inject(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Collector_inject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Collector_injectPtr
newCallback_Collector_inject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Collector_inject<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Collector_injectPtr
newCallback_Collector_inject(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Collector_inject<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Collector_injectPtr
newCallback_Collector_inject(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Collector_inject<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Collector_inject : public Callback_Collector_inject_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Collector_inject(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Collector_injectPtr
newCallback_Collector_inject(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Collector_inject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Collector_injectPtr
newCallback_Collector_inject(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Collector_inject<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Collector_injectPtr
newCallback_Collector_inject(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Collector_inject<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Collector_injectPtr
newCallback_Collector_inject(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Collector_inject<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Processor_init : public Callback_Processor_init_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Processor_init(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Processor_initPtr
newCallback_Processor_init(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_init<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_initPtr
newCallback_Processor_init(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_init<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Processor_initPtr
newCallback_Processor_init(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_init<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_initPtr
newCallback_Processor_init(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_init<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Processor_init : public Callback_Processor_init_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Processor_init(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Processor_initPtr
newCallback_Processor_init(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_init<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_initPtr
newCallback_Processor_init(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_init<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_initPtr
newCallback_Processor_init(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_init<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_initPtr
newCallback_Processor_init(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_init<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Processor_injectA : public Callback_Processor_injectA_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Processor_injectA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Processor_injectAPtr
newCallback_Processor_injectA(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_injectAPtr
newCallback_Processor_injectA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectA<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Processor_injectAPtr
newCallback_Processor_injectA(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectA<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_injectAPtr
newCallback_Processor_injectA(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectA<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Processor_injectA : public Callback_Processor_injectA_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Processor_injectA(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Processor_injectAPtr
newCallback_Processor_injectA(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectAPtr
newCallback_Processor_injectA(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectA<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectAPtr
newCallback_Processor_injectA(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectA<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectAPtr
newCallback_Processor_injectA(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectA<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Processor_injectB : public Callback_Processor_injectB_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Processor_injectB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Processor_injectBPtr
newCallback_Processor_injectB(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_injectBPtr
newCallback_Processor_injectB(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectB<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Processor_injectBPtr
newCallback_Processor_injectB(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Processor_injectBPtr
newCallback_Processor_injectB(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Processor_injectB<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Processor_injectB : public Callback_Processor_injectB_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Processor_injectB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Processor_injectBPtr
newCallback_Processor_injectB(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectBPtr
newCallback_Processor_injectB(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectB<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectBPtr
newCallback_Processor_injectB(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Processor_injectBPtr
newCallback_Processor_injectB(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Processor_injectB<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Frontend_multiply : public Callback_Frontend_multiply_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Canon::Matrix&);

    CallbackNC_Frontend_multiply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Canon::FrontendPrx __proxy = ::Canon::FrontendPrx::uncheckedCast(__result->getProxy());
        ::Canon::Matrix __ret;
        try
        {
            __ret = __proxy->end_multiply(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Frontend_multiplyPtr
newCallback_Frontend_multiply(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Canon::Matrix&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Frontend_multiply<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Frontend_multiplyPtr
newCallback_Frontend_multiply(T* instance, void (T::*cb)(const ::Canon::Matrix&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Frontend_multiply<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Frontend_multiply : public Callback_Frontend_multiply_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Canon::Matrix&, const CT&);

    Callback_Frontend_multiply(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Canon::FrontendPrx __proxy = ::Canon::FrontendPrx::uncheckedCast(__result->getProxy());
        ::Canon::Matrix __ret;
        try
        {
            __ret = __proxy->end_multiply(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Frontend_multiplyPtr
newCallback_Frontend_multiply(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Canon::Matrix&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Frontend_multiply<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Frontend_multiplyPtr
newCallback_Frontend_multiply(T* instance, void (T::*cb)(const ::Canon::Matrix&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Frontend_multiply<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
