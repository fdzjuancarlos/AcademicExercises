# -*- mode:python; coding:utf-8; tab-width:4 -*-

from unittest import TestCase

from doublex import assert_that, Spy, called, ANY_ARG

import Ice
Ice.loadSlice('-I {} cannon.ice'.format(Ice.getSliceDir()))
import Cannon

from processor import ProcessorI

from common import M1, M2


class ProcessorServantTests(TestCase):
    """
    These are NOT remote tests. We directly instantiate servants here.
    """
    def test_processors_1x1_block(self):
        # given
        P0 = ProcessorI()
        collector = Spy()

        A = M1(2)
        B = M1(5)
        C = M1(10)

        # when
        P0.init(0, 1, None, None, collector)
        P0.injectA(A, 0)
        P0.injectB(B, 0)

        # then
        assert_that(collector.inject, called().with_args(0, C, ANY_ARG))

    def test_processors_2x2_block(self):
        # given
        P0 = ProcessorI()
        collector = Spy()

        A = M2(1, 2,
               3, 4)
        B = M2(5, 6,
               7, 8)
        C = M2(19, 22,
               43, 50)

        # when
        P0.init(0, 1, None, None, collector)
        P0.injectA(A, 0)
        P0.injectB(B, 0)

        # then
        assert_that(collector.inject, called().with_args(0, C, ANY_ARG))
        
    def test_order_6(self):
        # given
        A = M6(1,	2,	-1,	3,	-5,	3,
               3,	0,	2,	7,	1,	2,
               5,	3,	3,	1,	4,	4,
               2,	1,	2,	2,	3,	3,
               -2,	2,	6,	6,	9,	7,
               -2,	2,	-4,	2,	6,	5)

        B = M6(1,	2,	7,	7,	-1,	3,
               2,	1,	2,	1,	-1,	2,
               3,	0,	5,	5,	6,	1,
               3,	1,	4,	1,	6,	4,
               2,	4,	3,	3,	3,	9,
               1,	4,	3,	2,	1,	9)

        # when
        C = matrix_multiply(A, B)

        # then
        expected = M6(4,    -1,	12,	-2,	-3,	0,
                      34,	25,	68,	45,	56,	66,
                      35,	46,	84,	74,	32,	100,
                      25,	31,	52,	42,	33,	72,
                      63,	68,	92,	65,	106,172,
                      13,	44,	11,	-2,	11,	101)

        assert_that(C, is_(expected))
